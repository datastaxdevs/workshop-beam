package com.datastax.astra.beam.fable;

import com.datastax.oss.driver.api.core.cql.BoundStatement;
import com.datastax.oss.driver.api.core.cql.BoundStatementBuilder;
import com.datastax.oss.driver.api.core.cql.PreparedStatement;
import com.datastax.oss.driver.api.core.cql.Row;
import com.datastax.oss.driver.api.core.cql.SimpleStatement;
import com.datastax.oss.driver.api.mapper.MapperContext;
import com.datastax.oss.driver.api.mapper.entity.saving.NullSavingStrategy;
import com.datastax.oss.driver.internal.core.util.concurrent.BlockingOperation;
import com.datastax.oss.driver.internal.core.util.concurrent.CompletableFutures;
import com.datastax.oss.driver.internal.mapper.DaoBase;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.Throwable;
import java.lang.Void;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Generated by the DataStax driver mapper, do not edit directly.
 */
@SuppressWarnings("all")
public class FableDaoImpl__MapperGenerated extends DaoBase implements FableDao {
  private static final Logger LOG = LoggerFactory.getLogger(FableDaoImpl__MapperGenerated.class);

  private final FableHelper__MapperGenerated fableHelper;

  private final PreparedStatement deleteAsyncStatement;

  private final PreparedStatement saveAsyncStatement;

  private FableDaoImpl__MapperGenerated(MapperContext context,
      FableHelper__MapperGenerated fableHelper, PreparedStatement deleteAsyncStatement,
      PreparedStatement saveAsyncStatement) {
    super(context);
    this.fableHelper = fableHelper;
    this.deleteAsyncStatement = deleteAsyncStatement;
    this.saveAsyncStatement = saveAsyncStatement;
  }

  @Override
  public Fable mapRow(Row arg0) {
    return fableHelper.get(arg0, false);
  }

  @Override
  public CompletionStage<Void> deleteAsync(Fable arg0) {
    try {
      BoundStatementBuilder boundStatementBuilder = deleteAsyncStatement.boundStatementBuilder();
      boundStatementBuilder = boundStatementBuilder.set("document_id", arg0.getDocumentId(), String.class);
      BoundStatement boundStatement = boundStatementBuilder.build();
      return executeAsyncAndMapToVoid(boundStatement);
    } catch (Exception e) {
      return CompletableFutures.failedFuture(e);
    }
  }

  @Override
  public CompletionStage<Void> saveAsync(Fable arg0) {
    try {
      BoundStatementBuilder boundStatementBuilder = saveAsyncStatement.boundStatementBuilder();
      fableHelper.set(arg0, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET, false);
      BoundStatement boundStatement = boundStatementBuilder.build();
      return executeAsyncAndMapToVoid(boundStatement);
    } catch (Exception e) {
      return CompletableFutures.failedFuture(e);
    }
  }

  public static CompletableFuture<FableDao> initAsync(MapperContext context) {
    LOG.debug("[{}] Initializing new instance for keyspace = {} and table = {}",
        context.getSession().getName(),
        context.getKeyspaceId(),
        context.getTableId());
    throwIfProtocolVersionV3(context);
    try {
      // Initialize all entity helpers
      FableHelper__MapperGenerated fableHelper = new FableHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        fableHelper.validateEntityFields();
      }
      List<CompletionStage<PreparedStatement>> prepareStages = new ArrayList<>();
      // Prepare the statement for `deleteAsync(T)`:
      SimpleStatement deleteAsyncStatement_simple = fableHelper.deleteByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method deleteAsync(T)",
          context.getSession().getName(),
          deleteAsyncStatement_simple.getQuery());
      CompletionStage<PreparedStatement> deleteAsyncStatement = prepare(deleteAsyncStatement_simple, context);
      prepareStages.add(deleteAsyncStatement);
      // Prepare the statement for `saveAsync(T)`:
      SimpleStatement saveAsyncStatement_simple = fableHelper.insert().build();
      LOG.debug("[{}] Preparing query `{}` for method saveAsync(T)",
          context.getSession().getName(),
          saveAsyncStatement_simple.getQuery());
      CompletionStage<PreparedStatement> saveAsyncStatement = prepare(saveAsyncStatement_simple, context);
      prepareStages.add(saveAsyncStatement);
      // Initialize all method invokers
      // Build the DAO when all statements are prepared
      return CompletableFutures.allSuccessful(prepareStages)
          .thenApply(v -> (FableDao) new FableDaoImpl__MapperGenerated(context,
              fableHelper,
              CompletableFutures.getCompleted(deleteAsyncStatement),
              CompletableFutures.getCompleted(saveAsyncStatement)))
          .toCompletableFuture();
    } catch (Throwable t) {
      return CompletableFutures.failedFuture(t);
    }
  }

  public static FableDao init(MapperContext context) {
    BlockingOperation.checkNotDriverThread();
    return CompletableFutures.getUninterruptibly(initAsync(context));
  }
}
